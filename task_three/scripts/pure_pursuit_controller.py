 #!/usr/bin/env python

import numpy as np
import rospy 

from task_three.msg import curState_and_target
from task_three.msg import model_inp

params ={
        "l" : 2
        }
def getDistance(p1,p2):
    return np.hypot(p1[0]-p2[0],p1[1]-p2[1])

pub = None
def controller(msg):
    global pub
    curpos =  [msg.x,msg.y,msg.theta]
    target_pos = [msg.tx,msg.ty]
    delta = get_stering_angle(curpos,target_pos)

    pub.publish(model_inp(msg.tv,delta))


# The target point is actually the look ahead point that is generated by the path generation module
def get_stering_angle(curpos, target): #State[x,y,theta],target[x,y,v]
    alpha = np.arctan2(target[1]-curpos[1],target[0]-curpos[0]) -curpos[2]
    ld = getDistance(curpos,target)
    #Stering angle formula
    delta = np.arctan2(2*params['l']*np.sin(alpha)/(ld+0.000000001),1.0)
    return delta

    
def main ():
    global pub 
    rospy.init_node("controller")
    pub = rospy.Publisher("simulation_inputs",model_inp,queue_size=10)
   # rate = rospy.Rate(1/params['delta']) #ferq = 1/deltaTime
    rospy.Subscriber("targets",curState_and_target,controller)
    rospy.spin()

    
if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass